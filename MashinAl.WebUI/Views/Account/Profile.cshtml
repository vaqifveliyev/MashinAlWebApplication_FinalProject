@using MashinAl.Business.Modules.PlateModule.Queries.PlateGetAllByUserQuery
@using MashinAl.WebUI.Views.ViewComponents
@using MashinAl.Business.Modules.AccountModule.Queries.GetAccountBalanceQuery
@model GetUserBalanceDto


@{
    ViewData["Title"] = "Mənim Profilim | MashinAl";
}

<section class="section my-profile">
    <div class="container">
        <div class="left-side">
            <ul>
                <li id="profile-navigation" class="active">
                    <a style="cursor:pointer">
                        <i class="fa-solid fa-bars"></i> Elanlarım
                    </a>
                </li>
                <li id="profile-navigation">
                    <a style="cursor:pointer">
                        <i class="fa-solid fa-wallet"></i> Balansım
                    </a>
                </li>
                <li id="profile-navigation">
                    <a style="cursor:pointer">
                        <i class="fa-solid fa-user"></i> Hesabım
                    </a>
                </li>
                <li>
                    <a asp-controller="account" asp-action="logout">
                        <i class="fa-solid fa-right-from-bracket"></i> Çıxış
                    </a>
                </li>
            </ul>
        </div>
        <div id="nav-tab" class="right-side opened">
            <h3>Elanlarım</h3>
            
            <div class="my-announcements-section">
                @await Component.InvokeAsync("ProfileCars")
            </div>
            <h3 style="margin-top: 20px;">Qeydiyyat Nişanları</h3>
            <div class="my-announcements-section">
                @await Component.InvokeAsync("ProfilePlates")
            </div>
        </div>
        <div id="nav-tab" class="right-side">
            <h3>Balansım</h3>
            <div class="balance-section">
                <div class="top-side">
                    <div class="balance-card">
                        <h4>Şəxsi balans</h4>
                        <p>Şəxsi hesaba mümkün ödəniş üsulları vasitəsilə qoyulan məbləğ</p>
                        <span class="balance-amount">@Model.Balance AZN</span>
                    </div>
                </div>
                <div class="bottom-side">
                    <div class="fill-balance">
                        <h4>Balans artırma</h4>
                        <div class="fill-form">
                            <a asp-controller="account" asp-action="addbalance" class="fill-button">Balansı artır</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="nav-tab" class="right-side">
            <h3>@User.GetClaimValue(ClaimTypes.GivenName)</h3>
            <form style="display: flex; flex-direction: column; row-gap: 10px; margin-top: 20px;">
                <input type="text" class="select-container" placeholder="@User.GetClaimValue(ClaimTypes.Name)" disabled>
                <input type="text" class="select-container" placeholder="@User.GetClaimValue(ClaimTypes.Surname)" disabled>
                <input type="email" class="select-container" placeholder="@User.GetClaimValue(ClaimTypes.Email)" disabled>
                <input type="password" class="select-container" value="************" disabled style="cursor: not-allowed;">
            </form>
        </div>

    </div>
</section>



@section addjs {
    <script src="~/libs/sweetalert/sweetalert.min.js"></script>
    <script>
        function boostEntity(id) {
            swal({
                title: "Diqqət!",
                text: ` ${id} nömrəli elanı önə çəkmək istədiyinizdən əminsiniz?`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
                buttons: ['Xeyr', 'Bəli']
            })
                .then((willBoost) => {
                    if (willBoost) {
                        let obj = { id };

                        $.ajax({
                            url: '@Url.Action("BoostCar")', 
                            type: 'POST',
                            data: obj,
                            success: function (response) {
                                if (response.error == true) {
                                    toastr.error('Elanı irəli çəkmək əməliyyatında xəta yarandı!', 'Xəta!');
                                    return;
                                }

                                toastr.success('Elan uğurla Önə çəkildi!', 'Uğurlu Nəticə!');
                                setTimeout(function () {
                                    location.reload();
                                }, 1000);
                            },
                            error: function (response) {
                                console.log(response);
                            }
                        });
                    }
                });
        }

        function removeEntity(id) {

            swal({
                title: "Diqqət!",
                text: `${id} nömrəli elanı silmək istədiyinizdən əminsiniz?`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
                buttons: ['Xeyr', 'Bəli']
            })
                .then((willDelete) => {
                    if (willDelete) {

                        let obj = { id };

                        $.ajax({
                            url: '@Url.Action("RemoveCar")',
                            type: 'POST',
                            data: obj,
                            success: function (response) {
                                if (response.error == true) {
                                    toastr.error('Elan silinmə əməliyyatında xəta yarandı!', 'Xəta!');
                                    return;
                                }

                                toastr.success('Elan uğurla silindi!', 'Uğurlu Nəticə!');
                                $('tbody#body').html(response)

                            },
                            error: function (response) {
                                console.log(response);
                            }
                        });
                    }
                });
        }

        /* MY ANNOUNCEMENT CARD SCRIPTS */

        let cardSettingsButtons = document.querySelectorAll('.card-settings');
        let dropdownSettings = document.querySelectorAll('.settings-dropdown');

        cardSettingsButtons.forEach(function (cardSettingsButton, index) {
            cardSettingsButton.addEventListener('click', function () {
                dropdownSettings[index].classList.toggle('opened');
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            var inputElement = document.querySelector('#amount-input');
            var buttonElement = document.querySelector('#fill-button');

            inputElement.addEventListener('input', function () {
                if (inputElement.value.trim() !== '') {
                    buttonElement.classList.remove('disabled');
                } else {
                    buttonElement.classList.add('disabled');
                }
            });
        });


        /* PROFILE NAV TABS */

        let navigationLi = document.querySelectorAll('#profile-navigation')
        let tabs = document.querySelectorAll('#nav-tab')

        navigationLi.forEach((navigation, index) => {
            navigation.addEventListener('click', () => {
                navigationLi.forEach((nav) => {
                    nav.classList.remove('active');
                });

                navigation.classList.add('active')

                tabs.forEach((tab) => {
                    tab.classList.remove('opened');
                });

                tabs[index].classList.add('opened');

            })
        })

    </script>
}
